{"version":3,"sources":["vasu.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Student","props","state","reason","Change","bind","press","e","this","setState","target","name","type","parseInt","value","preventDefault","userId","ref","match","params","extension","on","snapshot","console","log","val","length","innerText","redirect","child","set","then","data","alert","catch","error","className","style","textAlign","onChange","width","onClick","Component","Navbar","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uTAgBAA,gBAXqB,CACjBC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,IA6EJC,E,kDAvEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,IAEZ,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBANE,E,mDAQZE,GACHC,KAAKC,SAAL,eACKF,EAAEG,OAAOC,KAAyB,WAAlBJ,EAAEG,OAAOE,KAAoBC,SAASN,EAAEG,OAAOI,OAASP,EAAEG,OAAOI,U,4BAGpFP,GAAI,IAAD,OACLA,EAAEQ,iBACF,IAAIC,EAAS,EACMzB,aAAoB0B,IAAIT,KAAKP,MAAMiB,MAAMC,OAAOC,WAC9CC,GAAG,SAAS,SAAUC,GAC/BC,QAAQC,IAAIF,EAASG,OACrBT,EAAQM,EAASG,MAAMC,UAER,WAAvBnB,EAAEG,OAAOiB,WACTnB,KAAKC,SAAS,CACVmB,UAAU,IACX,WACCrC,aAAoB0B,IAAI,EAAKhB,MAAMiB,MAAMC,OAAOC,WAAWS,MAAMb,GAAQc,IAAI,CACzE3B,OAAQ,EAAKD,MAAMC,SACpB4B,MAAK,SAACC,GAELT,QAAQC,IAAI,QAASQ,GACrBC,MAAM,iCACPC,OAAM,SAACC,GAENZ,QAAQC,IAAI,SAAUW,W,+BAOlC,OADAZ,QAAQC,IAAIhB,KAAKP,OAEb,6BACI,yBAAKmC,UAAU,aAAY,wBAAIC,MAAO,CAAEC,UAAW,WAAa9B,KAAKP,MAAMiB,MAAMC,OAAOC,UAA7D,MAC3B,yBAAKgB,UAAU,aACX,0BAAMA,UAAU,UACZ,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,YACX,6BAAK,mEAAyC5B,KAAKP,MAAMiB,MAAMC,OAAOC,YACtE,6BACA,yBAAKgB,UAAU,2CAEX,4BAAQtB,MAAON,KAAKN,MAAMY,MAAOyB,SAAU/B,KAAKJ,OAAQO,KAAK,SAAS0B,MAAO,CAAEG,MAAO,UAClF,4BAAQ1B,MAAM,IAAd,mBACA,4BAAQA,MAAM,uBAAd,uBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,iBAAd,oBAIZ,yBAAKsB,UAAU,mBACX,yBAAKA,UAAU,0CACX,4BAAQxB,KAAK,SAAS6B,QAASjC,KAAKF,MAAO8B,UAAU,oBAArD,oB,GA9DdM,a,eCCPC,MAhBf,WACE,OACI,6BACF,yBAAKP,UAAU,aACX,gDAIJ,yBAAKA,UAAU,aACX,oCACA,6ECIOQ,MAZf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKR,UAAU,OACb,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,wBAAwBC,UAAW/C,OCEjCgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2DCZNkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAM2B,c","file":"static/js/main.9620be15.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport * as firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDFPgLiaM29uceuwJdh8Vry4GhhZa9s7-E\",\r\n    authDomain: \"my-project-1537699994266.firebaseapp.com\",\r\n    databaseURL: \"https://my-project-1537699994266.firebaseio.com\",\r\n    projectId: \"my-project-1537699994266\",\r\n    storageBucket: \"my-project-1537699994266.appspot.com\",\r\n    messagingSenderId: \"883808156358\",\r\n    appId: \"1:883808156358:web:4ec2400eb88825e90eb5c7\",\r\n    measurementId: \"G-FGRMGE4XQ8\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nclass Student extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            reason: ''\r\n        }\r\n        this.Change = this.Change.bind(this);\r\n        this.press = this.press.bind(this);\r\n    }\r\n    Change(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.type === 'number' ? parseInt(e.target.value) : e.target.value,\r\n        });\r\n    }\r\n    press(e) {\r\n        e.preventDefault();\r\n        var userId = 0;\r\n        var starCountRef = firebase.database().ref(this.props.match.params.extension);\r\n                starCountRef.on('value', function (snapshot) {\r\n                    console.log(snapshot.val());\r\n                    userId= snapshot.val().length;\r\n        });\r\n        if (e.target.innerText === \"submit\") {\r\n            this.setState({\r\n                redirect: true,\r\n            }, () => {    \r\n                firebase.database().ref(this.props.match.params.extension).child(userId).set({\r\n                    reason: this.state.reason\r\n                }).then((data) => {\r\n                    //success callback\r\n                    console.log('data ', data)\r\n                    alert('Thanks for your submission');\r\n                }).catch((error) => {\r\n                    //error callback\r\n                    console.log('error ', error)\r\n                })\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        console.log(this.props);\r\n        return (\r\n            <div>\r\n                <div className='jumbotron'><h1 style={{ textAlign: 'center' }}>{this.props.match.params.extension} </h1></div>\r\n                <div className='container'>\r\n                    <form className=\"center\">\r\n                        <div className=\"col-md-4 center boundary\">\r\n                            <div className=\"form-row\">\r\n                                <div><p>Please state reason for uninstalling {this.props.match.params.extension}</p></div>\r\n                                <br />\r\n                                <div className=\"form-group col-md-11 center Text-center\">\r\n\r\n                                    <select value={this.state.value} onChange={this.Change} name=\"reason\" style={{ width: 300 + 'px' }}>\r\n                                        <option value=\"\">choose a reason</option>\r\n                                        <option value=\"Extension is costly\">Extension is costly</option>\r\n                                        <option value=\"Not useful\">Not useful</option>\r\n                                        <option value=\"its confusing\">its confusing</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row center\">\r\n                                <div className=\"form-group col-md-5 center text-center\">\r\n                                    <button type=\"submit\" onClick={this.press} className=\"btn btn-primary \">submit</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Student;","import React from 'react';\r\n\r\n\r\nfunction Navbar() {\r\n  return (\r\n      <div>\r\n    <div className='jumbotron'>\r\n        <h3>\r\n            welcome to task \r\n        </h3>\r\n    </div>\r\n    <div className='container'>\r\n        <p>docs:</p>\r\n        <h3>Please enter link /uninstall/extentionName</h3>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport './App.css';\nimport Student from './vasu';\nimport { BrowserRouter,Route } from 'react-router-dom';\nimport Navbar from './Navbar';\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <Route exact path='/' component={Navbar} />\n      <Route path='/uninstall/:extension' component={Student} />\n    </div>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}